<!-- livebook:{"persist_outputs":true} -->

# 206. Reverse Linked List

## Problem

```elixir
defmodule ListNode do
  @type t :: %__MODULE__{
          val: integer,
          next: ListNode.t() | nil
        }
  defstruct val: 0, next: nil
end
```

<!-- livebook:{"output":true} -->

```
{:module, ListNode, <<70, 79, 82, 49, 0, 0, 7, ...>>, %ListNode{next: nil, val: 0}}
```

```elixir
defmodule Solution do
  @spec reverse_list(head :: ListNode.t() | nil) :: ListNode.t() | nil
  def reverse_list(head) do
    do_reverse_list(head, nil)
  end

  defp do_reverse_list(nil, reversed) do
    reversed
  end

  defp do_reverse_list(%{val: val} = node, reversed) do
    do_reverse_list(node.next, %ListNode{val: val, next: reversed})
  end
end

head = %ListNode{
  next: %ListNode{
    next: %ListNode{
      next: %ListNode{next: %ListNode{next: nil, val: 5}, val: 4},
      val: 3
    },
    val: 2
  },
  val: 1
}

Solution.reverse_list(head)
```

<!-- livebook:{"output":true} -->

```
%ListNode{
  next: %ListNode{
    next: %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 1}, val: 2}, val: 3},
    val: 4
  },
  val: 5
}
```
