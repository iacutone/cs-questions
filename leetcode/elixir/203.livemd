<!-- livebook:{"persist_outputs":true} -->

# 203. Remove Linked List Elements

## Problem

```elixir
defmodule ListNode do
  @type t :: %__MODULE__{
          val: integer,
          next: ListNode.t() | nil
        }
  defstruct val: 0, next: nil
end
```

<!-- livebook:{"output":true} -->

```
{:module, ListNode, <<70, 79, 82, 49, 0, 0, 7, ...>>, %ListNode{next: nil, val: 0}}
```

```elixir
defmodule Solution do
  @spec remove_elements(head :: ListNode.t() | nil, val :: integer) :: ListNode.t() | nil
  def remove_elements(head, val) do
    do_remove_node(head, val)
  end

  defp do_remove_node(nil, _val) do
    nil
  end

  defp do_remove_node(%{val: val, next: next}, val) do
    do_remove_node(next, val)
  end

  defp do_remove_node(%{val: value, next: next}, val) do
    %ListNode{val: value, next: do_remove_node(next, val)}
  end
end

head = %ListNode{
  next: %ListNode{
    next: %ListNode{
      next: %ListNode{
        next: %ListNode{
          next: %ListNode{next: %ListNode{next: nil, val: 6}, val: 5},
          val: 4
        },
        val: 3
      },
      val: 6
    },
    val: 2
  },
  val: 1
}

Solution.remove_elements(head, 6)
```

<!-- livebook:{"output":true} -->

```
%ListNode{
  next: %ListNode{
    next: %ListNode{next: %ListNode{next: %ListNode{next: nil, val: 5}, val: 4}, val: 3},
    val: 2
  },
  val: 1
}
```
