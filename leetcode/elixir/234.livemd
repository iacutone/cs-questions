<!-- livebook:{"persist_outputs":true} -->

# Untitled notebook

## 234. Palindrome Linked List

```elixir
defmodule ListNode do
  @type t :: %__MODULE__{
          val: integer,
          next: ListNode.t() | nil
        }
  defstruct val: 0, next: nil
end
```

<!-- livebook:{"output":true} -->

```
{:module, ListNode, <<70, 79, 82, 49, 0, 0, 7, ...>>, %ListNode{next: nil, val: 0}}
```

```elixir
head = %ListNode{
  next: %ListNode{
    next: %ListNode{next: %ListNode{next: nil, val: 1}, val: 2},
    val: 2
  },
  val: 1
}

defmodule Solution do
  @spec is_palindrome(head :: ListNode.t() | nil) :: boolean
  def is_palindrome(head) do
    build_list_from_node_values(head, [])
    |> is_panindrom?()
  end

  defp build_list_from_node_values(%ListNode{} = node, list) do
    list = [node.val | list]
    build_list_from_node_values(node.next, list)
  end

  defp build_list_from_node_values(_, list) do
    list
  end

  defp is_panindrom?(list) do
    list == Enum.reverse(list)
  end
end

Solution.is_palindrome(head)
```

<!-- livebook:{"output":true} -->

```
true
```
